==> Java 8 Stream API :-
- Stream API is used to process collections of objects.
- A stream in Java is a sequence of objects that supports various methods that can be pipelined to produce the desired result.

- Syntax :-
    Stream<T> stream;

=> Java Stream Features :-
1. A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
2. Streams donâ€™t change the original data structure, they only provide the result as per the pipelined methods.
3. Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. Terminal operations mark the end of the stream and return the result.

=> Creating Stream
Check :- src/CreatingStream/Example1.java

=> Different Operations On Streams :-
1. Intermediate Operations
    - Intermediate Operations are the types of operations in which multiple methods are chained in a row.
    - Intermediate operations transform a stream into another stream.
    - It enables the concept of filtering where one method filters data and passes it to another method after processing.
    Important Intermediate Operations :-
    1. map() :-
    The map method is used to return a stream consisting of the results of applying the given function to the elements of this stream.
    Syntax :-
        <R> Stream<R> map(Function<? super T, ? extends R> mapper)

    2. filter() :-
    The filter method is used to select elements as per the Predicate passed as an argument.
    Syntax :-
        Stream<T> filter(Predicate<? super T> predicate)

    3. sorted() :-
    The sorted method is used to sort the stream.
    Syntax :-
        Stream<T> sorted()
        Stream<T> sorted(Comparator<? super T> comparator)

    4. flatMap() :-
    The flatMap operation in Java Streams is used to flatten a stream of collections into a single stream of elements.
    Syntax :-
        <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)

    5. distinct () :-
    Removes duplicate elements. It returns a stream consisting of the distinct elements (according to Object.equals(Object)).
    Syntax :-
        Stream<T> distinct()

    6. peek() :-
    Performs an action on each element without modifying the stream.
    It returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.
    Syntax :-
        Stream<T> peek(Consumer<? super T> action)

2. Terminal Operations